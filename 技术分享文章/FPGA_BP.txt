# *FPGA实现BP神经网络*
## 激活函数
##### 1.神经网络激励函数的选择和实现方法
下面将介绍BP神经网络常用的激活函数。
1.1  简单线性函数 
神经元功能函数 f 连续取值，输入 x 由连接矩阵 W 加权产生输出，如图：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20210616095944388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5mZW5na3Vp,size_16,color_FFFFFF,t_70)
1.2 Sigmid函数
神经元的输出限制在[-1 :+1]之间的连续非减函数，此时称为双极性Sigmoid函数；同理，当此函数最小值向上平移1个单位长度后，神经元的输出限制在[0 :+1]之间的连续非减函数，此时成为单极性Sigmoid函数。我们生活中默认的S函数指的就是双极性Sigmoid函数。两者如图所示：
![在这里插入图片描述](https://img-blog.csdnimg.cn/20210616101001661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpYW5mZW5na3Vp,size_16,color_FFFFFF,t_70)

激励函数的选取与神经网络的类型有关，同一神经网络的不同层激励函数也不相同，BP 神经网络的输出层一般采用线性激活函数，而隐含层一般采用 S 型函数（Sigmoid）。可以看出双极性和单极性Sigmoid函数的大概形状都相似，本文设计的基于 FPGA 的 BP 神经网络采用了双极性 S 函数，原因如下：

 1. 双极性Sigmoid有正有负，单极性Sigmoid只有正的，对于复杂函数，大多都存在负向关系，则选用双极性 S 型函数。
 2. 在-1<x<+1 范围内,双极性 S 函数比单极性 S 函数的导函数变化快,所以对误差修正的幅度也更大，更有利于整个神经网络的快速收敛。 
 3.  在收敛误差相同时，双曲正切的收敛速度比 S 型函数快，这样更容易避免达到局部最小。
 4. 在利用 Verilog 语言在 FPGA 实现激活函数时，因为双曲正切函数关于原点对称，所以只需要设计正区间内的函数，然后通过负向结果取绝对值的方式实现整个函数，更能够节省逻辑资源。
  
在采用 FPGA 设计神经网络的整个过程中，激活函数的实现方法至关重要，直接决定着所设计网络的整体性能。由于神经网络并行运算，需要用到大量乘法器，所以在神经网络的激励信号实现中尽可能少的使用乘法器，资源是设计激励函数合成系统的一个标准。所以根据前面介绍，FPGA 由于其自身的限制，不能直接实现非线性的双极性 S 函数。因此，只有通过间接逼近的方法对其进行实现，以下为在 FPGA 上实现非线性函数的几种常用方法：
 1. Taylor 级数法 
 Taylor 级数法是一种高精度实现激励函数的方法。但是利用五阶 Taylor 级数展开对双极性 S 函数进行逼近，会占用 FPGA 的大量逻辑资源。虽然如今的 FPGA 芯片中已经集成了大量的乘法器，但 FPGA 需要进行大量的乘累加运算，所以除非对精度要求过高，一般不采用这种方式实现激励函数。
 2. 
